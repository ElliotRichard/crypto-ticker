{"ast":null,"code":"import { ChartData } from '../../classes/ChartData';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"ngx-echarts\";\nexport let ChartComponent = /*#__PURE__*/(() => {\n  class ChartComponent {\n    constructor() {\n      this.chartData = new ChartData();\n      this.enableSeries = {};\n    }\n\n    ngOnInit() {\n      if (this.$coinData) {\n        this.chartData.updateData(this.$coinData);\n      } // initialize chart options:\n\n\n      this.options = {\n        legend: {\n          show: true,\n          valueAnimation: true,\n          data: this.chartData.getLabels().sort((a, b) => a.localeCompare(b))\n        },\n        tooltip: {\n          trigger: 'axis',\n          formatter: params => {\n            params = params[0];\n            const date = new Date(params.name);\n            return date.getDate() + '/' + date.getHours() + ':' + date.getMinutes() + ' | ' + params.value[1];\n          },\n          axisPointer: {\n            animation: false\n          }\n        },\n        xAxis: {\n          type: 'time',\n          splitLine: {\n            show: false\n          },\n          // name: 'Time',\n          axisLabel: {\n            formatter: (time, index) => {\n              return new Date(time).toLocaleTimeString(['en-nz', 'en-gb'], {\n                hour12: true\n              });\n            }\n          },\n          scale: true,\n          min: value => {\n            // If there is data older than 5 min, only show last 5 minutes\n            if (value.max - value.min > 300000) {\n              return value.max - 300000;\n            } else return value.min;\n          }\n        },\n        yAxis: {\n          type: 'value',\n          boundaryGap: [0, '100%'],\n          splitLine: {\n            show: false\n          },\n          scale: true\n        },\n        axisLabel: {\n          formatter: price => {\n            return parseFloat(price).toLocaleString('en-nz', {\n              currency: 'NZD'\n            });\n            return `$${price}`;\n          }\n        },\n        series: this.chartData.getSeries('line')\n      };\n    }\n\n    ngOnChanges() {\n      this.chartData.updateData(this.$coinData);\n      this.updateOptions = {\n        series: this.chartData.getSeries('line'),\n        legend: this.chartData.getLegend(this.sortBy)\n      };\n    }\n\n  }\n\n  ChartComponent.ɵfac = function ChartComponent_Factory(t) {\n    return new (t || ChartComponent)();\n  };\n\n  ChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChartComponent,\n    selectors: [[\"app-chart\"]],\n    inputs: {\n      $coinData: \"$coinData\",\n      sortBy: \"sortBy\"\n    },\n    features: [i0.ɵɵNgOnChangesFeature],\n    decls: 1,\n    vars: 2,\n    consts: [[\"echarts\", \"\", 1, \"chart\", 3, \"options\", \"merge\"]],\n    template: function ChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"options\", ctx.options)(\"merge\", ctx.updateOptions);\n      }\n    },\n    directives: [i1.NgxEchartsDirective],\n    styles: [\".chart[_ngcontent-%COMP%]{min-height:200px;width:100vw;height:45vh;margin-bottom:-5vh}\"]\n  });\n  return ChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}